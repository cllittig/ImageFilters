Descrição do Código e Funcionalidades
Este código define uma classe chamada Imagem em Python para manipulação de imagens em tons de cinza. A classe implementa uma série de operações sobre uma imagem, como a aplicação de filtros, manipulação de bordas e transformação de pixels, seguindo princípios comuns no processamento digital de imagens. A implementação utiliza bibliotecas específicas para manipulação de imagens, como PIL e tkinter.

Estrutura Geral da Classe Imagem
A classe Imagem recebe, em sua inicialização, os parâmetros largura, altura e pixels. Esses parâmetros representam a largura e altura da imagem, e uma lista de inteiros que representam os valores dos pixels em tons de cinza. A classe também inclui métodos auxiliares para carregar, salvar e exibir a imagem, além de métodos que aplicam transformações e filtros.

Métodos de Manipulação Básica de Pixel
get_pixel(x, y): Este método recebe as coordenadas x e y de um pixel e retorna seu valor, assegurando que o acesso ao pixel fora dos limites da imagem seja corrigido para um valor válido.

set_pixel(x, y, c): Define o valor de um pixel nas coordenadas x e y com um valor c especificado. O valor de c é armazenado diretamente na lista de pixels.

aplicar_por_pixel(func): Aplica uma função func para cada pixel na imagem, criando uma nova imagem com os valores transformados. Este método é útil para operações que envolvem transformação de cada pixel individualmente, como inverção de tons.

Métodos de Filtros e Operações
Aplicação de Kernel (aplicarKernel):

Esse método permite a aplicação de um filtro convolucional à imagem através de um kernel. Um kernel é uma matriz que processa um conjunto de pixels ao redor de um ponto central, aplicando uma operação que resulta em um valor final para o pixel correspondente na imagem de saída.
Neste método, os valores do kernel são multiplicados pelos valores dos pixels vizinhos, acumulando os resultados em uma soma, que é atribuída ao pixel central da nova imagem.
Subtração de Imagens (subImagem):

Subtrai os valores de pixels de outra imagem das coordenadas correspondentes na imagem original. A operação gera uma nova imagem com os valores resultantes, assegurando que os valores finais estão entre 0 e 255 para evitar distorções.
Multiplicação por Escalar (mulImgEscalar):

Multiplica cada pixel da imagem por um valor escalar, criando um efeito de ajuste de brilho ou contraste. Os valores são restringidos ao intervalo válido de 0 a 255.
Inversão de Tons (invertida):

Realiza uma inversão de tons, subtraindo o valor de cada pixel de 255, o que transforma tons claros em escuros e vice-versa.
Aplicação de Desfoque (borrada):

O método borrada utiliza um kernel de média para desfocar a imagem. Um kernel de tamanho n x n é construído onde todos os valores são iguais, o que cria um efeito de suavização ao calcular a média dos valores dos pixels em uma área ao redor de cada pixel.
Foco (focada):

A operação de foco envolve a subtração da versão borrada da imagem da versão original multiplicada por um fator, destacando áreas de contraste e enfatizando bordas.
Detecção de Bordas (bordas):

Esse método usa o operador Sobel, que é uma técnica de detecção de bordas usando kernels de convolução orientados nos eixos X e Y. A operação calcula a magnitude do gradiente em cada ponto, revelando as bordas da imagem onde ocorre uma mudança abrupta na intensidade dos pixels.
Funções Auxiliares para Carregar, Salvar e Exibir Imagens
A classe Imagem inclui ainda funções auxiliares para simplificar o processo de manipulação das imagens, com destaque para:

carregar(nome_arquivo): Carrega uma imagem em tons de cinza a partir de um arquivo.
salvar(nome_arquivo): Salva a imagem atual em um arquivo com o formato especificado.
mostrar(): Exibe a imagem em uma nova janela Tkinter. Esta função é útil para verificar visualmente o resultado das operações aplicadas.